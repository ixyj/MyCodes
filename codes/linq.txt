var data = new string[] { "a", "b", "c", "d", "c", "b", "c", "1" };

var result = from dat in data
			 where dat.CompareTo("1") != 0
			 group dat by dat
			 into tmp
				 orderby tmp.Count() descending
				 select new { ret = tmp.Key };

foreach (var e in result.Take(2))
{
	Console.WriteLine(e.ret);
}
------------------------------------------------
var data = new Dictionary<string, string> { { "1", "a" }, { "3", "b" }, {"2","s"}};

var result = from dat in data
			 where dat.Key.CompareTo("1") != 0
			 let v = dat.Value
				 select v;
//////////////////////////////////////////////////////////////
var icons = from icon in 
			(
				from icon in rawIcons.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
				select (iconsMap.ContainsKey(icon) ? iconsMap[icon] : icon)
			)
			group icon by icon
			into ic
			orderby ic.Count() descending
			select ic;
//////////////////////////////////////////////////////////////
string.Join(",", data.ToList().Where((k, i) => i%2 == 0).Select(k => k.Replace(",", "#comma#")).Take(2));		
//////////////////////////////////////////////////////////////
int[] a = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
int[] b = { 1, 4, 88, 9 };

var c = from aa in a
join bb in b
on aa equals bb
select new { first = aa, second = bb };

foreach (var cc in c)
{
Console.WriteLine(cc.first + cc.second);
}
/////////////////////////////////////////////////////////////
string[] a = { "a1","b2","c3","d4" };
int[] b = { 2 };

var c = from aa in a
join bb in b
on aa.Last() equals bb.ToString().First() 
into ab
from aabb in ab.DefaultIfEmpty()
select new { first = aa, second = aabb };

foreach (var cc in c)
{
Console.WriteLine(cc.first +"\t"+ cc.second);
}
////////
如果有复杂的比较需求，建议自定义一个类型来作为比较键，用一个方法来获取：
c = from aa in a
join bb in b
on aa.GetKey() equals bb.GetKey()
...
GetKey()可以是一个扩展方法。
/////////////////////////////////////////////////////////////
string[] a = { "a1","b2","c3","d4" };
int[] b = { 2, 3};

var c = from aa in a
from bb in b
select new { first = aa, second = bb };

foreach (var cc in c)
{
	Console.WriteLine(cc.first +"\t"+ cc.second);
}
///////////////////////////////////////////////////////////
string[] a = { "a1","b2","c3","d4" };
int[] b = { 2, 3};

var c = from aa in a
from bb in b
where aa.EndsWith(bb.ToString())
select new { first = aa, second = bb };

foreach (var cc in c)
{
Console.WriteLine(cc.first +"\t"+ cc.second);
}
/////////////////////////////////////////////////////////
var data = new string[] { "a b c", "d e b", "c", "s d"};

var result = data.SelectMany((s, i) => from ss in s.Split(' ') select new {vv = ss, ii = i});

foreach (var e in result)
{
	Console.WriteLine(e.ii +":\t" +e.vv);
}
//////////////////////////////////////////////////////////////
var data = new string[] { "12", "32", "354", "34"};

var result = data.Where((s, i)=> i%2==1);

//////////////////////////////////////////////////////////////
var data = new string[] {"One", "Two", "Three", "Four", "Five", "Six", "Seven" };

var result = data.Where(num => num.Length == 3).Select( x => x).ToList();
result.ForEach(x => Console.WriteLine(x));
if (data.All(x => x.Length >=3))
   Console.WriteLine("All numbers have at least three characters.");
if (data.Any(x => x.Length >= 5))
	Console.WriteLine("The sequence contains at least a item which has 5 or more characters.");
First, Intersect, Union, Last...

/////////////////////////////////////////////////////////////
string[] words = {"cherry", "apple", "blueberry"};
var sortedWords = from w in words orderby w select w;
Console.WriteLine("The sorted list of words:");
foreach (var w in sortedWords)
{
	Console.WriteLine(w);
}

sortedWords = from w in words orderby w.Length select w;
Console.WriteLine("The sorted list of words (by length):");
foreach (var w in sortedWords)
{
	Console.WriteLine(w);
}

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
var actions = new List<Tuple<List<string>, double>>
                {
                    new Tuple<List<string>, double>(new List<string> {"1"}, 1.3),
                    new Tuple<List<string>, double>(new List<string> {"3"}, 2.3),
                    new Tuple<List<string>, double>(new List<string> {"2"}, 5.3),
                    new Tuple<List<string>, double>(new List<string> {"1"}, 1.8),
                    new Tuple<List<string>, double>(new List<string> {"4"}, 0.7),
                    new Tuple<List<string>, double>(new List<string> {"2"}, 4.3),
                    new Tuple<List<string>, double>(new List<string> {"3"}, 0.3),
                    new Tuple<List<string>, double>(new List<string> {"1"}, 1.13)
                };
---------------------------------------------------------------------------
var ret = from acs in actions
		group acs by acs.Item1[0]
		into a
		select new {cag = a.Key, sum = a.Sum(x => x.Item2)};
---------------------------------above is equal to below -------------------------------------- 
var ret = actions.GroupBy(acs => acs.Item1[0]).Select(a => new {cag = a.Key, sum = a.Sum(x => x.Item2)});///OrderByDescending
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

SkipWhile 意思是一直跳过数据，一直到满足表达式的项时，才开始返回数据，而不管之后的项是否仍然满足表达式
